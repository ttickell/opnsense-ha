#!/bin/sh

# OPNsense HA Cleanup Script
# Removes all HA-related files and configurations for clean testing
# Version: 1.0

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        log_error "This script must be run as root"
        exit 1
    fi
}

# Create backup before cleanup
create_backup() {
    local backup_dir="/tmp/ha-cleanup-backup-$(date +%Y%m%d-%H%M%S)"
    
    log_info "Creating backup in ${backup_dir}"
    mkdir -p "${backup_dir}"
    
    # Backup files that exist
    local files_to_backup="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
        /usr/local/bin/debug_log
        /usr/local/etc/rc.carp_service_status.d/wan_connectivity
    "
    
    for file in ${files_to_backup}; do
        if [ -f "${file}" ]; then
            local backup_path="${backup_dir}$(dirname "${file}")"
            mkdir -p "${backup_path}"
            cp "${file}" "${backup_path}/"
            log_info "Backed up: ${file}"
        fi
    done
    
    if [ -d "${backup_dir}/usr" ]; then
        log_success "Backup created: ${backup_dir}"
    else
        log_warning "No HA files found to backup"
    fi
}

# Remove HA files
cleanup_files() {
    log_info "Removing HA files..."
    
    local files_to_remove="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
        /usr/local/bin/debug_log
        /usr/local/etc/rc.carp_service_status.d/wan_connectivity
    "
    
    for file in ${files_to_remove}; do
        if [ -f "${file}" ]; then
            rm -f "${file}"
            log_success "Removed: ${file}"
        else
            log_info "Not found: ${file}"
        fi
    done
    
    # Remove empty directories if they exist
    local dirs_to_check="
        /usr/local/etc/rc.syshook.d/carp
        /usr/local/etc/rc.carp_service_status.d
    "
    
    for dir in ${dirs_to_check}; do
        if [ -d "${dir}" ] && [ -z "$(ls -A "${dir}")" ]; then
            rmdir "${dir}"
            log_success "Removed empty directory: ${dir}"
        fi
    done
}

# Check for running processes
check_processes() {
    log_info "Checking for running HA processes..."
    
    # Check if any HA scripts are currently running
    if pgrep -f "00-ha-singleton" >/dev/null 2>&1; then
        log_warning "HA singleton script is currently running"
        log_info "Waiting for completion..."
        sleep 3
    fi
    
    # Check for lock files
    if [ -f "/var/run/syshook-carp-ha-singleton.lock" ]; then
        log_warning "Found HA lock file, removing..."
        rm -f "/var/run/syshook-carp-ha-singleton.lock"
        log_success "Removed lock file"
    fi
}

# Clean temporary files
cleanup_temp() {
    log_info "Cleaning temporary files..."
    
    # Remove setup working directories
    rm -rf /tmp/opnsense-ha-setup* 2>/dev/null || true
    rm -rf /tmp/ha-setup-backup-* 2>/dev/null || true
    
    log_success "Cleaned temporary files"
}

# Display status
show_status() {
    log_info "HA cleanup status:"
    
    local files_to_check="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
        /usr/local/bin/debug_log
        /usr/local/etc/rc.carp_service_status.d/wan_connectivity
    "
    
    local found_files=0
    for file in ${files_to_check}; do
        if [ -f "${file}" ]; then
            echo "  ❌ ${file} (still exists)"
            found_files=$((found_files + 1))
        else
            echo "  ✅ ${file} (removed)"
        fi
    done
    
    if [ ${found_files} -eq 0 ]; then
        log_success "All HA files cleaned successfully"
    else
        log_warning "${found_files} files still exist"
    fi
}

# Usage information
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --no-backup    Skip backup creation"
    echo "  --force        Force cleanup without confirmation"
    echo "  -h, --help     Show this help message"
    echo
    echo "This script removes all OPNsense HA singleton files and configurations."
    echo "Use this to clean the system between test installations."
    exit 1
}

# Main cleanup function
main() {
    local create_backup_flag=true
    local force_flag=false
    
    # Parse command line arguments
    while [ $# -gt 0 ]; do
        case $1 in
            --no-backup)
                create_backup_flag=false
                shift
                ;;
            --force)
                force_flag=true
                shift
                ;;
            -h|--help)
                usage
                ;;
            *)
                log_error "Unknown option: $1"
                usage
                ;;
        esac
    done
    
    echo "================================================"
    echo "OPNsense HA Cleanup Script v1.0"
    echo "================================================"
    echo
    
    check_root
    
    # Confirmation unless forced
    if [ "${force_flag}" = "false" ]; then
        echo "This will remove all HA-related files and configurations."
        printf "Continue? [y/N]: "
        read -r response
        case "${response}" in
            [yY]|[yY][eE][sS])
                ;;
            *)
                log_info "Cleanup cancelled"
                exit 0
                ;;
        esac
        echo
    fi
    
    # Execute cleanup steps
    if [ "${create_backup_flag}" = "true" ]; then
        create_backup
    fi
    
    check_processes
    cleanup_files
    cleanup_temp
    
    echo
    show_status
    echo
    log_success "HA cleanup completed!"
    
    if [ "${create_backup_flag}" = "true" ]; then
        log_info "Backup preserved for recovery if needed"
    fi
}

# Run main function
main "$@"