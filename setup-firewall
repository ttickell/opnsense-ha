#!/bin/sh

# OPNsense HA Singleton Setup Script
# Comprehensive installer for HA customizations
# Version: 2.1 - Universal HA Logic (works for any number of WAN interfaces)

set -e  # Exit on any error

# Configuration variables
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="2.1"
GITHUB_REPO="https://github.com/ttickell/opnsense-ha.git"
WORKDIR="/tmp/opnsense-ha-setup"
BACKUP_DIR="/tmp/ha-setup-backup-$(date +%Y%m%d-%H%M%S)"

# Parse command line arguments
WAN_INTERFACES="${1:-vtnet1}"
BRANCH_NAME="${2:-main}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Error handling
error_exit() {
    log_error "$1"
    log_error "Installation failed. Check logs and try again."
    cleanup
    exit 1
}

# Cleanup function
cleanup() {
    if [ -d "${WORKDIR}" ]; then
        rm -rf "${WORKDIR}"
    fi
}

# Trap to ensure cleanup on exit
trap cleanup EXIT

# Function to check if running on OPNsense
check_opnsense() {
    # Check for OPNsense installation - multiple possible locations
    if [ -f "/usr/local/opnsense/version/opnsense" ]; then
        local version=$(cat /usr/local/opnsense/version/opnsense)
        log_info "Detected OPNsense version: ${version}"
    elif [ -f "/usr/local/opnsense/version/core" ]; then
        # Try to extract version from core file (JSON format)
        if command -v jq >/dev/null 2>&1; then
            local version=$(jq -r '.product_version' /usr/local/opnsense/version/core 2>/dev/null || echo "unknown")
        else
            local version=$(grep -o '"product_version":"[^"]*"' /usr/local/opnsense/version/core 2>/dev/null | cut -d'"' -f4 || echo "unknown")
        fi
        log_info "Detected OPNsense version: ${version}"
    else
        error_exit "This script must be run on an OPNsense system"
    fi
}

# Function to create backup
create_backup() {
    log_info "Creating backup in ${BACKUP_DIR}"
    mkdir -p "${BACKUP_DIR}"
    
    # Backup existing files if they exist
    local files_to_backup="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
        /usr/local/etc/rc.carp_service_status.d/wan_connectivity
    "
    
    for file in ${files_to_backup}; do
        if [ -f "${file}" ]; then
            local backup_path="${BACKUP_DIR}$(dirname "${file}")"
            mkdir -p "${backup_path}"
            cp "${file}" "${backup_path}/"
            log_info "Backed up: ${file}"
        fi
    done
}

# Function to validate branch name
validate_branch() {
    local branch="$1"
    
    # Basic validation - check for valid git branch name characters
    if echo "${branch}" | grep -qE '^[a-zA-Z0-9._/-]+$'; then
        return 0
    else
        log_error "Invalid branch name: ${branch}"
        log_error "Branch names can only contain letters, numbers, dots, underscores, hyphens, and forward slashes"
        return 1
    fi
}

# Function to install git if needed
ensure_git() {
    if ! command -v git >/dev/null 2>&1; then
        log_info "Installing git..."
        if ! pkg install -y git; then
            error_exit "Failed to install git"
        fi
        log_success "Git installed successfully"
    else
        log_info "Git already installed"
    fi
}

# Function to install from GitHub
install_from_github() {
    log_info "Installing from GitHub repository..."
    
    ensure_git
    
    # Clean working directory
    rm -rf "${WORKDIR}"
    mkdir -p "${WORKDIR}"
    
    # Clone repository
    log_info "Cloning repository (branch: ${BRANCH_NAME})..."
    if ! git clone -b "${BRANCH_NAME}" "${GITHUB_REPO}" "${WORKDIR}"; then
        log_warning "Failed to clone branch '${BRANCH_NAME}', trying default branch..."
        if ! git clone "${GITHUB_REPO}" "${WORKDIR}"; then
            error_exit "Failed to clone repository"
        fi
    fi
    
    # Install files from repository
    install_files_from_directory "${WORKDIR}"
}

# Function to install files from directory
install_files_from_directory() {
    local source_dir="$1"
    
    log_info "Installing HA files from ${source_dir}..."
    
    # Create necessary directories
    mkdir -p /usr/local/etc/rc.syshook.d/carp
    mkdir -p /usr/local/bin
    mkdir -p /usr/local/etc/rc.carp_service_status.d
    
    # Install main CARP script
    if [ -f "${source_dir}/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" ]; then
        sed "s/__INT_LIST__/${WAN_INTERFACES}/g" \
            "${source_dir}/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" > \
            /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        chmod 755 /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        log_success "Installed CARP hook script"
    else
        error_exit "CARP script not found in source"
    fi
    
    # Install configuration template
    if [ -f "${source_dir}/usr/local/etc/ha-singleton.conf.example" ]; then
        if [ ! -f "/usr/local/etc/ha-singleton.conf" ]; then
            # Use universal configuration template
            sed "s/vtnet1 vtnet2/${WAN_INTERFACES}/g" \
                "${source_dir}/usr/local/etc/ha-singleton.conf.example" > \
                /usr/local/etc/ha-singleton.conf
            log_success "Installed universal configuration file"
        else
            log_warning "Configuration file already exists, not overwriting"
        fi
    fi
    
    # Install IPv6 integration script
    if [ -f "${source_dir}/usr/local/bin/ha-ipv6-integration.sh" ]; then
        cp "${source_dir}/usr/local/bin/ha-ipv6-integration.sh" /usr/local/bin/
        chmod 755 /usr/local/bin/ha-ipv6-integration.sh
        log_success "Installed IPv6 integration script"
    fi
    
    # Install debug logging utility
    if [ -f "${source_dir}/usr/local/bin/debug_log" ]; then
        cp "${source_dir}/usr/local/bin/debug_log" /usr/local/bin/
        chmod 755 /usr/local/bin/debug_log
        log_success "Installed debug logging utility"
    fi
    
    # Install CARP service status check
    if [ -f "${source_dir}/usr/local/etc/rc.carp_service_status.d/wan_connectivity" ]; then
        cp "${source_dir}/usr/local/etc/rc.carp_service_status.d/wan_connectivity" \
           /usr/local/etc/rc.carp_service_status.d/
        chmod 755 /usr/local/etc/rc.carp_service_status.d/wan_connectivity
        log_success "Installed CARP service status check"
    fi
}

# Function to install using embedded files (fallback)
install_embedded() {
    log_warning "GitHub installation failed, using embedded files..."
    
    # This would contain the embedded file content
    # For now, we'll create basic versions
    
    error_exit "Embedded installation not implemented. Please ensure internet connectivity for GitHub installation."
}

# Function to validate installation
validate_installation() {
    log_info "Validating installation..."
    
    local required_files="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
    "
    
    for file in ${required_files}; do
        if [ ! -f "${file}" ]; then
            error_exit "Required file missing: ${file}"
        fi
        
        if [ ! -x "${file}" ] && [[ "${file}" == *"00-ha-singleton"* ]]; then
            error_exit "Script not executable: ${file}"
        fi
    done
    
    log_success "Installation validation passed"
}

# Function to display post-installation instructions
show_post_install_info() {
    log_success "Installation completed successfully!"
    echo
    log_info "Next steps:"
    echo "1. Review and customize /usr/local/etc/ha-singleton.conf"
    echo "2. Configure CARP VIPs in the OPNsense GUI"
    echo "3. Set up HA synchronization settings"
    echo "4. Test failover functionality"
    echo
    log_info "Configuration file: /usr/local/etc/ha-singleton.conf"
    log_info "Main script: /usr/local/etc/rc.syshook.d/carp/00-ha-singleton"
    log_info "Backup location: ${BACKUP_DIR}"
    log_info "Installed from branch: ${BRANCH_NAME}"
    echo
    log_warning "Remember to configure both primary and secondary firewalls!"
}

# Main installation function
main() {
    echo "================================================"
    echo "OPNsense HA Singleton Setup Script v${SCRIPT_VERSION}"
    echo "================================================"
    echo
    
    # Validate environment
    check_opnsense
    
    # Validate branch name
    if ! validate_branch "${BRANCH_NAME}"; then
        error_exit "Invalid branch name provided: ${BRANCH_NAME}"
    fi
    
    # Check if running as root
    if [ "$(id -u)" -ne 0 ]; then
        error_exit "This script must be run as root"
    fi
    
    log_info "WAN Interfaces: ${WAN_INTERFACES}"
    log_info "Git Branch: ${BRANCH_NAME}"
    echo
    
    # Create backup
    create_backup
    
    # Try GitHub installation first
    if install_from_github 2>/dev/null; then
        log_success "GitHub installation completed"
    else
        log_warning "GitHub installation failed, trying embedded installation"
        install_embedded
    fi
    
    # Validate installation
    validate_installation
    
    # Show post-installation information
    show_post_install_info
}

# Usage information
usage() {
    echo "Usage: $0 [WAN_INTERFACES] [BRANCH_NAME]"
    echo
    echo "Parameters:"
    echo "  WAN_INTERFACES    Space-delimited list of WAN interface names (default: vtnet1)"
    echo "  BRANCH_NAME       Git branch to use for installation (default: main)"
    echo
    echo "Examples:"
    echo "  $0                           # Use defaults (vtnet1, main branch)"
    echo "  $0 vtnet1                    # Single WAN interface, main branch"
    echo "  $0 \"vtnet1 vtnet2\"           # Multiple WAN interfaces, main branch"
    echo "  $0 vtnet1 ghcwork            # Single WAN interface, ghcwork branch"
    echo "  $0 \"vtnet1 vtnet2\" develop   # Multiple WAN interfaces, develop branch"
    echo
    echo "This script installs OPNsense HA singleton customizations."
    exit 1
}

# Check for help flag
case "${1:-}" in
    -h|--help|help)
        usage
        ;;
esac

# Run main function
main "$@"

