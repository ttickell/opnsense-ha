#!/bin/sh

# OPNsense HA Singleton Setup Script
# Comprehensive installer for HA customizations with CARP flapping fixes
# Version: 2.7 - Added DHCPv6 DUID override system for HA consistency

set -e  # Exit on any error

# Configuration variables
SCRIPT_NAME="$(basename "$0")"
SCRIPT_VERSION="2.7"
GITHUB_REPO="https://github.com/ttickell/opnsense-ha.git"
WORKDIR="/tmp/opnsense-ha-setup"
BACKUP_DIR="/tmp/ha-setup-backup-$(date +%Y%m%d-%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Error handling
error_exit() {
    log_error "$1"
    log_error "Installation failed. Check logs and try again."
    cleanup
    exit 1
}

# Cleanup function
cleanup() {
    if [ -d "${WORKDIR}" ]; then
        rm -rf "${WORKDIR}"
    fi
}

# Function to read WAN interfaces from existing configuration
read_existing_config() {
    local config_file="/usr/local/etc/ha-singleton.conf"
    
    if [ -f "${config_file}" ]; then
        # Try to extract WAN_INTS from the config file
        local wan_ints=$(grep "^WAN_INTS=" "${config_file}" 2>/dev/null | cut -d'=' -f2 | tr -d '"' | tr -d "'")
        if [ -n "${wan_ints}" ]; then
            echo "${wan_ints}"
            return 0
        fi
    fi
    
    # Return empty if no config found or WAN_INTS not found
    return 1
}

# Trap to ensure cleanup on exit
trap cleanup EXIT

# Usage information
usage() {
    echo "Usage: $0 [OPTIONS] [WAN_INTERFACES] [BRANCH_NAME]"
    echo
    echo "Options:"
    echo "  --cleanup, -c         Clean existing HA installation before installing"
    echo "  --fix-flapping, -f    Fix CARP flapping by disabling conflicting scripts (no install)"
    echo "  --test, -t           Test existing configuration (no install)"
    echo "  --help, -h           Show this help message"
    echo
    echo "Parameters:"
    echo "  WAN_INTERFACES    Space-delimited list of WAN interface names"
    echo "                    (default: reads from existing config or vtnet1)"
    echo "  BRANCH_NAME       Git branch to use for installation (default: main)"
    echo
    echo "Examples:"
    echo "  $0                           # Smart defaults (existing config or vtnet1, main branch)"
    echo "  $0 --test                    # Test using existing configuration"
    echo "  $0 --cleanup vtnet1          # Clean first, then install single WAN"
    echo "  $0 --fix-flapping            # Fix CARP flapping issues only (no install)"
    echo "  $0 --test                    # Test existing configuration"
    echo "  $0 vtnet1                    # Single WAN interface, main branch"
    echo "  $0 \"vtnet1 vtnet2\"           # Multiple WAN interfaces, main branch"
    echo "  $0 vtnet1 ghcwork            # Single WAN interface, ghcwork branch"
    echo "  $0 --cleanup \"vtnet1 vtnet2\" develop  # Clean first, multi-WAN, develop branch"
    echo
    echo "This script installs OPNsense HA singleton customizations."
    exit 1
}

# Function to fix CARP flapping issues by disabling conflicting scripts
fix_carp_flapping() {
    log_info "Fixing CARP flapping issues by disabling conflicting legacy scripts..."
    
    local fixed_count=0
    
    # Disable old 00-ha-update script if it exists
    if [ -f "/usr/local/etc/rc.syshook.d/carp/00-ha-update" ]; then
        mv "/usr/local/etc/rc.syshook.d/carp/00-ha-update" \
           "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" 2>/dev/null || true
        chmod -x "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" 2>/dev/null || true
        log_success "Disabled conflicting script: 00-ha-update"
        fixed_count=$((fixed_count + 1))
    fi
    
    # Disable old 99-ha-start script if it exists  
    if [ -f "/usr/local/etc/rc.syshook.d/start/99-ha-start" ]; then
        mv "/usr/local/etc/rc.syshook.d/start/99-ha-start" \
           "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled" 2>/dev/null || true
        chmod -x "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled" 2>/dev/null || true
        log_success "Disabled conflicting script: 99-ha-start"
        fixed_count=$((fixed_count + 1))
    fi
    
    # Ensure already disabled scripts can't be executed
    for disabled_script in \
        "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" \
        "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled"; do
        if [ -f "${disabled_script}" ]; then
            chmod -x "${disabled_script}" 2>/dev/null || true
        fi
    done
    
    # Clean up any legacy lock files and state files
    rm -f /tmp/home-ha.lck 2>/dev/null || true
    rm -f /tmp/home-ha.* 2>/dev/null || true
    
    if [ ${fixed_count} -gt 0 ]; then
        log_success "Fixed ${fixed_count} conflicting script(s). CARP flapping should be resolved."
        log_info "You may want to reboot the system to ensure all changes take effect."
    else
        log_info "No conflicting scripts found. CARP flapping fix not needed."
    fi
}

# Parse command line arguments
CLEANUP_FIRST=false
FIX_FLAPPING_ONLY=false
TEST_CONFIG_ONLY=false
WAN_INTERFACES=""
BRANCH_NAME=""

# Parse options and arguments
while [ $# -gt 0 ]; do
    case $1 in
        --cleanup|-c)
            CLEANUP_FIRST=true
            shift
            ;;
        --fix-flapping|-f)
            FIX_FLAPPING_ONLY=true
            shift
            ;;
        --test|-t)
            TEST_MODE=true
            shift
            ;;
        --help|-h)
            usage
            ;;
        --)
            # End of options, remaining are positional arguments
            shift
            break
            ;;
        -*)
            log_error "Unknown option: $1"
            usage
            ;;
        *)
            # First non-option argument is WAN_INTERFACES
            if [ -z "${WAN_INTERFACES}" ]; then
                WAN_INTERFACES="$1"
            # Second non-option argument is BRANCH_NAME
            elif [ -z "${BRANCH_NAME}" ]; then
                BRANCH_NAME="$1"
            else
                log_error "Too many arguments: $1"
                usage
            fi
            shift
            ;;
    esac
done

# If fixing flapping only, do that and exit
if [ "$FIX_FLAPPING_ONLY" = "true" ]; then
    log_info "Fixing CARP flapping issues..."
    fix_carp_flapping
    log_info "CARP flapping fix completed. Please reboot the system."
    exit 0
fi

# Handle remaining positional arguments after --
while [ $# -gt 0 ]; do
    if [ -z "${WAN_INTERFACES}" ]; then
        WAN_INTERFACES="$1"
    elif [ -z "${BRANCH_NAME}" ]; then
        BRANCH_NAME="$1"
    else
        log_error "Too many arguments: $1"
        usage
    fi
    shift
done

# Set defaults if not provided
# First, try to read from existing configuration (smart defaults)
if [ -z "${WAN_INTERFACES}" ]; then
    existing_wan_ints=$(read_existing_config)
    if [ $? -eq 0 ] && [ -n "${existing_wan_ints}" ]; then
        WAN_INTERFACES="${existing_wan_ints}"
        log_info "Using WAN interfaces from existing configuration: ${WAN_INTERFACES}"
    else
        WAN_INTERFACES="vtnet1"
        log_info "No existing configuration found, using default: ${WAN_INTERFACES}"
    fi
fi
BRANCH_NAME="${BRANCH_NAME:-main}"

# Function to check if running on OPNsense
check_opnsense() {
    # Check for OPNsense installation - multiple possible locations
    if [ -f "/usr/local/opnsense/version/opnsense" ]; then
        local version=$(cat /usr/local/opnsense/version/opnsense)
        log_info "Detected OPNsense version: ${version}"
    elif [ -f "/usr/local/opnsense/version/core" ]; then
        # Try to extract version from core file (JSON format)
        if command -v jq >/dev/null 2>&1; then
            local version=$(jq -r '.product_version' /usr/local/opnsense/version/core 2>/dev/null || echo "unknown")
        else
            local version=$(grep -o '"product_version":"[^"]*"' /usr/local/opnsense/version/core 2>/dev/null | cut -d'"' -f4 || echo "unknown")
        fi
        log_info "Detected OPNsense version: ${version}"
    else
        error_exit "This script must be run on an OPNsense system"
    fi
}

# Function to cleanup existing installation
cleanup_existing() {
    log_info "Cleaning up existing HA installation..."
    
    local files_to_remove="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/rc.syshook.d/start/25-duid-override
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
        /usr/local/bin/debug_log
        /usr/local/etc/rc.carp_service_status.d/wan_connectivity
    "
    
    for file in ${files_to_remove}; do
        if [ -f "${file}" ]; then
            rm -f "${file}"
            log_info "Removed: ${file}"
        fi
    done
    
    # Clean up conflicting old HA scripts that cause CARP flapping
    log_info "Disabling conflicting legacy HA scripts..."
    
    # Disable old 00-ha-update script if it exists
    if [ -f "/usr/local/etc/rc.syshook.d/carp/00-ha-update" ]; then
        mv "/usr/local/etc/rc.syshook.d/carp/00-ha-update" \
           "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" 2>/dev/null || true
        chmod -x "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" 2>/dev/null || true
        log_info "Disabled conflicting script: 00-ha-update"
    fi
    
    # Disable old 99-ha-start script if it exists  
    if [ -f "/usr/local/etc/rc.syshook.d/start/99-ha-start" ]; then
        mv "/usr/local/etc/rc.syshook.d/start/99-ha-start" \
           "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled" 2>/dev/null || true
        chmod -x "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled" 2>/dev/null || true
        log_info "Disabled conflicting script: 99-ha-start"
    fi
    
    # Also disable any already disabled versions to ensure they can't be executed
    for disabled_script in \
        "/usr/local/etc/rc.syshook.d/carp/00-ha-update.disabled" \
        "/usr/local/etc/rc.syshook.d/start/99-ha-start.disabled"; do
        if [ -f "${disabled_script}" ]; then
            chmod -x "${disabled_script}" 2>/dev/null || true
        fi
    done
    
    # Remove lock files
    rm -f /var/run/syshook-carp-ha-singleton.lock 2>/dev/null || true
    rm -f /tmp/home-ha.lck 2>/dev/null || true
    rm -f /tmp/home-ha.* 2>/dev/null || true
    
    # Clean temporary directories  
    rm -rf /tmp/opnsense-ha-setup* 2>/dev/null || true
    
    log_success "Cleanup completed"
}

create_backup() {
    log_info "Creating backup in ${BACKUP_DIR}"
    mkdir -p "${BACKUP_DIR}"
    
    # Backup existing files if they exist
    local files_to_backup="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
        /usr/local/bin/ha-ipv6-integration.sh
    "
    
    for file in ${files_to_backup}; do
        if [ -f "${file}" ]; then
            local backup_path="${BACKUP_DIR}$(dirname "${file}")"
            mkdir -p "${backup_path}"
            cp "${file}" "${backup_path}/"
            log_info "Backed up: ${file}"
        fi
    done
}

# Function to validate branch name
validate_branch() {
    local branch="$1"
    
    # Basic validation - check for valid git branch name characters
    if echo "${branch}" | grep -qE '^[a-zA-Z0-9._/-]+$'; then
        return 0
    else
        log_error "Invalid branch name: ${branch}"
        log_error "Branch names can only contain letters, numbers, dots, underscores, hyphens, and forward slashes"
        return 1
    fi
}

# Function to validate WAN interfaces exist on the system
validate_wan_interfaces() {
    local interfaces="$1"
    local valid=true
    local available_interfaces
    
    log_info "Validating WAN interfaces: ${interfaces}"
    
    # Get list of available network interfaces
    available_interfaces=$(ifconfig -l 2>/dev/null || echo "")
    
    if [ -z "${available_interfaces}" ]; then
        log_warning "Could not retrieve network interface list, skipping validation"
        return 0
    fi
    
    # Check each specified interface
    for interface in ${interfaces}; do
        if echo "${available_interfaces}" | grep -q "\b${interface}\b"; then
            log_success "Interface ${interface}: Found"
        else
            log_error "Interface ${interface}: NOT FOUND"
            log_error "Available interfaces: ${available_interfaces}"
            valid=false
        fi
    done
    
    if [ "${valid}" = "false" ]; then
        log_error "One or more WAN interfaces do not exist on this system"
        log_info "Use 'ifconfig -l' to see available interfaces"
        return 1
    fi
    
    log_success "All WAN interfaces validated successfully"
    return 0
}

# Function to install git if needed
ensure_git() {
    if ! command -v git >/dev/null 2>&1; then
        log_info "Installing git..."
        if ! pkg install -y git; then
            error_exit "Failed to install git"
        fi
        log_success "Git installed successfully"
    else
        log_info "Git already installed"
    fi
}

# Function to install from GitHub
install_from_github() {
    log_info "Installing from GitHub repository..."
    
    ensure_git
    
    # Clean working directory
    rm -rf "${WORKDIR}"
    mkdir -p "${WORKDIR}"
    
    # Clone repository
    log_info "Cloning repository (branch: ${BRANCH_NAME})..."
    if ! git clone -b "${BRANCH_NAME}" "${GITHUB_REPO}" "${WORKDIR}"; then
        log_warning "Failed to clone branch '${BRANCH_NAME}', trying default branch..."
        if ! git clone "${GITHUB_REPO}" "${WORKDIR}"; then
            error_exit "Failed to clone repository"
        fi
    fi
    
    # Install files from repository
    install_files_from_directory "${WORKDIR}"
}

# Function to install files from directory
install_files_from_directory() {
    local source_dir="$1"
    
    log_info "Installing HA files from ${source_dir}..."
    
    # Create necessary directories
    mkdir -p /usr/local/etc/rc.syshook.d/carp
    mkdir -p /usr/local/bin
    mkdir -p /usr/local/etc/rc.carp_service_status.d
    
    # Install main CARP script
    if [ -f "${source_dir}/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" ]; then
        sed "s/__INT_LIST__/${WAN_INTERFACES}/g" \
            "${source_dir}/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" > \
            /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        chmod 755 /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        log_success "Installed CARP hook script"
    else
        error_exit "CARP script not found in source"
    fi
    
    # Install configuration template
    if [ -f "${source_dir}/usr/local/etc/ha-singleton.conf.example" ]; then
        # Always install/overwrite if cleanup was requested, otherwise respect existing file
        if [ "${CLEANUP_FIRST}" = "true" ] || [ ! -f "/usr/local/etc/ha-singleton.conf" ]; then
            # Use universal configuration template
            sed "s/vtnet1 vtnet2/${WAN_INTERFACES}/g" \
                "${source_dir}/usr/local/etc/ha-singleton.conf.example" > \
                /usr/local/etc/ha-singleton.conf
            log_success "Installed universal configuration file"
        else
            log_warning "Configuration file already exists, not overwriting (use --cleanup to force)"
        fi
    fi
    
    # Install IPv6 integration script
    if [ -f "${source_dir}/usr/local/bin/ha-ipv6-integration.sh" ]; then
        cp "${source_dir}/usr/local/bin/ha-ipv6-integration.sh" /usr/local/bin/
        chmod 755 /usr/local/bin/ha-ipv6-integration.sh
        log_success "Installed IPv6 integration script"
    fi
    
    # Install debug logging utility
    if [ -f "${source_dir}/usr/local/bin/debug_log" ]; then
        cp "${source_dir}/usr/local/bin/debug_log" /usr/local/bin/
        chmod 755 /usr/local/bin/debug_log
        log_success "Installed debug logging utility"
    fi
    
    # Install DUID override hook for DHCPv6 HA support
    if [ -f "${source_dir}/usr/local/etc/rc.syshook.d/start/25-duid-override" ]; then
        mkdir -p /usr/local/etc/rc.syshook.d/start
        cp "${source_dir}/usr/local/etc/rc.syshook.d/start/25-duid-override" /usr/local/etc/rc.syshook.d/start/
        chmod 755 /usr/local/etc/rc.syshook.d/start/25-duid-override
        log_success "Installed DHCPv6 DUID override hook"
    fi
    
    # Create the CARP service status directory (for future use)
    mkdir -p /usr/local/etc/rc.carp_service_status.d
}

# Function to install using embedded files (fallback)
install_embedded() {
    log_warning "GitHub installation failed, using embedded files..."
    
    # This would contain the embedded file content
    # For now, we'll create basic versions
    
    error_exit "Embedded installation not implemented. Please ensure internet connectivity for GitHub installation."
}

# Function to validate DUID configuration for HA setups
validate_ha_duid_configuration() {
    log_info "Validating DHCPv6 DUID configuration for HA..."
    
    # Check if this appears to be an HA environment
    local ha_detected=false
    
    # Look for existing CARP configuration
    if ifconfig 2>/dev/null | grep -q "carp:" || \
       [ -f "/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" ] || \
       [ -f "/usr/local/etc/ha-singleton.conf" ]; then
        ha_detected=true
        log_info "HA environment detected"
    fi
    
    # If HA is detected, check for DUID override file
    if [ "${ha_detected}" = "true" ]; then
        if [ ! -f "/conf/dhcp6c_duid.override" ]; then
            echo
            log_error "HA environment detected but DHCPv6 DUID override file is missing!"
            echo
            log_info "For HA clusters with IPv6, DUID synchronization is MANDATORY."
            log_info "The DUID override file ensures both firewalls appear as the same"
            log_info "DHCPv6 client to ISP servers, preventing prefix delegation issues."
            echo
            log_warning "Required: /conf/dhcp6c_duid.override"
            echo
            log_info "To resolve this issue:"
            echo "  1. On PRIMARY firewall: Enable DHCPv6 client and obtain lease"
            echo "  2. On PRIMARY firewall: cp /var/db/dhcp6c_duid /conf/dhcp6c_duid.override"
            echo "  3. On SECONDARY firewall: scp primary:/conf/dhcp6c_duid.override /conf/"
            echo "  4. Reboot both firewalls to apply DUID override"
            echo
            return 1
        else
            # Validate DUID override file format
            if [ ! -r "/conf/dhcp6c_duid.override" ] || [ ! -s "/conf/dhcp6c_duid.override" ]; then
                log_error "DUID override file exists but is not readable or empty"
                return 1
            fi
            
            local duid_size=$(stat -f%z "/conf/dhcp6c_duid.override" 2>/dev/null)
            if [ -z "${duid_size}" ] || [ "${duid_size}" -lt 8 ] || [ "${duid_size}" -gt 50 ]; then
                log_error "DUID override file has suspicious size (${duid_size} bytes)"
                log_info "DUID files should typically be 10-20 bytes"
                return 1
            fi
            
            log_success "DUID override file found and appears valid (${duid_size} bytes)"
            
            # Check if system DUID matches override (if system DUID exists)
            if [ -f "/var/db/dhcp6c_duid" ]; then
                if cmp -s "/var/db/dhcp6c_duid" "/conf/dhcp6c_duid.override"; then
                    log_success "System DUID matches override file"
                else
                    log_warning "System DUID differs from override (will be corrected at next boot)"
                fi
            else
                log_info "No system DUID file found (will be created from override at next boot)"
            fi
        fi
    else
        log_info "Standalone firewall detected - DUID override is optional"
        if [ -f "/conf/dhcp6c_duid.override" ]; then
            log_info "DUID override file found (will be applied at boot)"
        else
            log_info "No DUID override file found (system will generate DUID as needed)"
        fi
    fi
    
    return 0
}

# Function to validate installation
validate_installation() {
    log_info "Validating installation..."
    
    local required_files="
        /usr/local/etc/rc.syshook.d/carp/00-ha-singleton
        /usr/local/etc/ha-singleton.conf
    "
    
    for file in ${required_files}; do
        if [ ! -f "${file}" ]; then
            error_exit "Required file missing: ${file}"
        fi
        
        if [ ! -x "${file}" ] && [ "${file}" != "${file%00-ha-singleton*}" ]; then
            error_exit "Script not executable: ${file}"
        fi
    done
    
    # Validate configuration file content
    if [ -f "/usr/local/etc/ha-singleton.conf" ]; then
        log_info "Validating configuration file content..."
        
        # Check that WAN interfaces were properly substituted
        local configured_interfaces
        configured_interfaces=$(grep '^WAN_INTS=' /usr/local/etc/ha-singleton.conf 2>/dev/null | cut -d'"' -f2)
        
        if [ -n "${configured_interfaces}" ]; then
            if [ "${configured_interfaces}" = "vtnet1 vtnet2" ]; then
                log_warning "Configuration still has default interfaces (vtnet1 vtnet2)"
                log_warning "Expected: ${WAN_INTERFACES}"
            elif [ "${configured_interfaces}" = "${WAN_INTERFACES}" ]; then
                log_success "WAN interfaces correctly configured: ${configured_interfaces}"
            else
                log_warning "WAN interfaces in config (${configured_interfaces}) differ from expected (${WAN_INTERFACES})"
            fi
        else
            log_warning "Could not read WAN_INTS from configuration file"
        fi
        
        # Validate that PFSYNC demotion factor will be set correctly
        if grep -q 'init_system_tunables' /usr/local/etc/rc.syshook.d/carp/00-ha-singleton 2>/dev/null; then
            log_success "System tunables initialization found in script"
        else
            log_warning "System tunables initialization not found in script"
        fi
        
        # Check if the configured interfaces actually have CARP configured
        if [ -n "${configured_interfaces}" ] && command -v ifconfig >/dev/null 2>&1; then
            log_info "Checking for CARP configuration on interfaces..."
            local carp_found=false
            for interface in ${configured_interfaces}; do
                if ifconfig "${interface}" 2>/dev/null | grep -q "carp"; then
                    log_success "CARP configuration found on ${interface}"
                    carp_found=true
                elif ifconfig 2>/dev/null | grep -E "^${interface}_vlan[0-9]+" | head -1 | while read -r vlan_line; do
                    local vlan_interface=$(echo "${vlan_line}" | cut -d: -f1)
                    if ifconfig "${vlan_interface}" 2>/dev/null | grep -q "carp"; then
                        log_success "CARP configuration found on VLAN interface: ${vlan_interface}"
                        exit 0
                    fi
                done; then
                    carp_found=true
                fi
            done
            
            if [ "${carp_found}" = "false" ]; then
                log_warning "No CARP configuration found on specified WAN interfaces"
                log_info "Make sure to configure CARP VIPs in the OPNsense GUI"
            fi
        fi
    fi
    
    log_success "Installation validation passed"
}

# Function to display post-installation instructions
show_post_install_info() {
    log_success "Installation completed successfully!"
    echo
    log_info "Next steps:"
    echo "1. Review and customize /usr/local/etc/ha-singleton.conf"
    echo "2. Configure CARP VIPs in the OPNsense GUI"
    echo "3. Set up HA synchronization settings"
    echo "4. ${YELLOW}IMPORTANT: Configure DHCPv6 DUID synchronization (see below)${NC}"
    echo "5. Test failover functionality"
    echo "6. Verify system tunables: sysctl net.pfsync.carp_demotion_factor"
    echo
    log_info "Configuration file: /usr/local/etc/ha-singleton.conf"
    log_info "Main script: /usr/local/etc/rc.syshook.d/carp/00-ha-singleton"
    log_info "DUID override hook: /usr/local/etc/rc.syshook.d/start/25-duid-override"
    log_info "Backup location: ${BACKUP_DIR}"
    log_info "Installed from branch: ${BRANCH_NAME}"
    echo
    log_warning "Remember to configure both primary and secondary firewalls!"
    echo
    
    # DHCPv6 DUID Synchronization Instructions
    echo "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo "${YELLOW}                          DHCPv6 DUID SYNCHRONIZATION REQUIRED                          ${NC}"
    echo "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
    log_info "For HA clusters with IPv6, both firewalls MUST use the same DHCPv6 DUID:"
    echo
    echo "${GREEN}On PRIMARY firewall:${NC}"
    echo "  1. Enable DHCPv6 client and obtain initial lease"
    echo "  2. Copy DUID to override file:"
    echo "     ${BLUE}cp /var/db/dhcp6c_duid /conf/dhcp6c_duid.override${NC}"
    echo "  3. Verify DUID file was created:"
    echo "     ${BLUE}ls -la /conf/dhcp6c_duid.override${NC}"
    echo
    echo "${GREEN}On SECONDARY firewall:${NC}"
    echo "  1. Copy DUID from primary firewall:"
    echo "     ${BLUE}scp primary-firewall:/conf/dhcp6c_duid.override /conf/${NC}"
    echo "  2. Verify DUID files match:"
    echo "     ${BLUE}diff /conf/dhcp6c_duid.override primary-firewall:/conf/dhcp6c_duid.override${NC}"
    echo "     (No output = files match)"
    echo "  3. Reboot secondary firewall to apply DUID override"
    echo
    echo "${GREEN}Verification on BOTH firewalls:${NC}"
    echo "  • Check DUID override status in system log:"
    echo "    ${BLUE}grep 'duid-override' /var/log/system/latest.log${NC}"
    echo "  • Verify active DUID matches override:"
    echo "    ${BLUE}cmp -s /var/db/dhcp6c_duid /conf/dhcp6c_duid.override && echo 'MATCH' || echo 'DIFFER'${NC}"
    echo
    echo "${YELLOW}⚠️  WARNING: Without DUID synchronization, IPv6 prefix delegations may be${NC}"
    echo "${YELLOW}   inconsistent during failover/failback operations!${NC}"
    echo "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
    log_info "To test the configuration manually:"
    echo "  /usr/local/etc/rc.syshook.d/carp/00-ha-singleton 1@vtnet0_vlan115 MASTER"
    echo "  Check logs: tail -f /var/log/system/latest.log | grep syshook-carp-ha-singleton"
}

# Test mode function - validate system without installing
run_test_mode() {
    log_info "Running in test mode - performing system validation..."
    echo
    
    # Validate environment
    check_opnsense
    echo
    
    # Validate WAN interfaces
    log_info "Validating WAN interfaces: ${WAN_INTERFACES}"
    if validate_wan_interfaces "${WAN_INTERFACES}"; then
        log_success "WAN interfaces validation passed"
    else
        log_error "WAN interfaces validation failed"
        
        # Suggest alternative interfaces if available
        log_info "Available network interfaces on this system:"
        if command -v ifconfig >/dev/null 2>&1; then
            ifconfig -l | tr ' ' '\n' | grep -E "^(vtnet|em|igb|ix)" | head -10 | while read -r iface; do
                echo "  ${iface}"
            done
        fi
    fi
    echo
    
    # Check if installation exists and validate it
    if [ -f "/usr/local/etc/rc.syshook.d/carp/00-ha-singleton" ]; then
        log_info "Existing installation found - validating..."
        validate_installation
        echo
        
        # Check CARP status
        log_info "Checking CARP status..."
        if command -v ifconfig >/dev/null 2>&1; then
            ifconfig | grep -E "(carp|vhid)" || log_info "No CARP interfaces found"
        fi
        echo
        
        # Check system tunables
        log_info "Checking system tunables..."
        if command -v sysctl >/dev/null 2>&1; then
            local carp_demotion=$(sysctl -n net.inet.carp.demotion 2>/dev/null || echo 'not set')
            local pfsync_demotion=$(sysctl -n net.pfsync.carp_demotion_factor 2>/dev/null || echo 'not set')
            
            echo "net.inet.carp.demotion: ${carp_demotion}"
            echo "net.pfsync.carp_demotion_factor: ${pfsync_demotion}"
            
            # Check for known problematic values
            if [ "${pfsync_demotion}" != "0" ] && [ "${pfsync_demotion}" != "not set" ]; then
                log_warning "PFSYNC demotion factor is ${pfsync_demotion} (should be 0 to prevent flapping)"
                log_info "Run with --fix-flapping to correct this issue"
            else
                log_success "PFSYNC demotion factor is optimal (${pfsync_demotion})"
            fi
            
            if [ "${carp_demotion}" != "0" ] && [ "${carp_demotion}" != "not set" ]; then
                log_warning "CARP demotion level is elevated: ${carp_demotion}"
            else
                log_success "CARP demotion level is optimal (${carp_demotion})"
            fi
        fi
        echo
        
        # Show recent log entries
        log_info "Recent HA singleton log entries:"
        if [ -f "/var/log/system/latest.log" ]; then
            tail -20 /var/log/system/latest.log | grep "syshook-carp-ha-singleton" | tail -5 || log_info "No recent log entries found"
        fi
    else
        log_info "No existing installation found"
    fi
    
    # Validate DUID configuration
    echo
    validate_ha_duid_configuration || log_warning "DUID validation failed - check configuration"
    
    log_success "Test mode validation completed"
}

# Main installation function
main() {
    echo "================================================"
    echo "OPNsense HA Singleton Setup Script v${SCRIPT_VERSION}"
    echo "================================================"
    echo
    
    # If in test mode, run validation and exit
    if [ "$TEST_MODE" = "true" ]; then
        run_test_mode
        exit 0
    fi
    
    # Validate environment
    check_opnsense
    
    # Validate branch name
    if ! validate_branch "${BRANCH_NAME}"; then
        error_exit "Invalid branch name provided: ${BRANCH_NAME}"
    fi
    
    # Validate WAN interfaces exist on the system
    if ! validate_wan_interfaces "${WAN_INTERFACES}"; then
        error_exit "Invalid WAN interfaces provided: ${WAN_INTERFACES}"
    fi
    
    # Check if running as root
    if [ "$(id -u)" -ne 0 ]; then
        error_exit "This script must be run as root"
    fi
    
    log_info "WAN Interfaces: ${WAN_INTERFACES}"
    log_info "Git Branch: ${BRANCH_NAME}"
    log_info "Cleanup First: ${CLEANUP_FIRST}"
    echo
    
    # Cleanup existing installation if requested
    if [ "${CLEANUP_FIRST}" = "true" ]; then
        cleanup_existing
    fi
    
    # Create backup
    create_backup
    
    # Try GitHub installation first
    if install_from_github 2>/dev/null; then
        log_success "GitHub installation completed"
    else
        log_warning "GitHub installation failed, trying embedded installation"
        install_embedded
    fi
    
    # Validate installation
    validate_installation
    
    # Validate DUID configuration for HA
    echo
    if ! validate_ha_duid_configuration; then
        log_error "DUID validation failed - HA setup incomplete"
        log_warning "Installation completed but requires DUID synchronization before production use"
        exit 1
    fi
    
    # Show post-installation information
    show_post_install_info
}

# Check for help flag before processing arguments
case "${1:-}" in
    -h|--help|help)
        usage
        ;;
esac

# Run main function
main "$@"

